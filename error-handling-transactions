--error handling and transactions
--logging errors
DECLARE @OrderDate datetime = GETDATE();
DECLARE @DueDate datetime = DATEADD(dd, 7, GETDATE());
DECLARE @CustomerID int = 1;
DECLARE @OrderID int = 0
-- Declare a custom error if the specified order doesn't exist

OrderID@error varchar(25) = 'Order #' + cast(@OrderID as varchar) + ' does not exist';

IF NOT ___ (SELECT * FROM SalesLT.SalesOrderHeader WHERE SalesOrderID = @OrderID)
BEGIN
	-- Throw the custom error
	THROW 50001, @error, 0;
END
ELSE
BEGIN
	___ FROM SalesLT.SalesOrderDetail WHERE ___ = ___;
	DELETE FROM SalesLT.SalesOrderHeader WHERE SalesOrderID = @OrderID;
___

--logging errors(2)
DECLARE @OrderID int = 0
DECLARE @error varchar(25) = 'Order #' + cast(@OrderID as varchar) + ' does not exist';

-- Wrap IF ELSE in a TRY block
BEGIN TRY
    IF NOT EXISTS (SELECT * FROM SalesLT.SalesOrderHeader WHERE SalesOrderID = @OrderID)
    BEGIN THROW
    	THROW 50001,'The record does not exist.', @error, 0
    END THROW
    ELSE
BEGIN DELETE
    	DELETE FROM SalesLT.SalesOrderDetail WHERE SalesOrderID = @OrderID;
      DELETE FROM SalesLT.SalesOrderHeader WHERE SalesOrderID = @OrderID;
END DELETE
END TRY
-- Add a CATCH block to print out the error
BEGIN CATCH
	-- Catch and print the error
	PRINT @Error;
END CATCH

--ensuring data consistency
DECLARE @OrderID int = 0
DECLARE @error varchar(25) = 'Order #' + cast(@OrderID as varchar) + ' does not exist';

BEGIN TRY
	IF NOT EXISTS (SELECT * FROM SalesLT.SalesOrderHeader WHERE SalesOrderID = @OrderID)
	BEGIN
		THROW 50001, @error, 0
	END
	ELSE
	BEGIN
    -- Add code to treat as single transactional unit of work
	  ___ ___
		DELETE FROM SalesLT.SalesOrderDetail
		WHERE SalesOrderID = @OrderID;
		DELETE FROM SalesLT.SalesOrderHeader
		WHERE SalesOrderID = @OrderID;
	  BEGIN TRANSACTION
	END
END TRY
BEGIN CATCH
	IF @@TRANCOUNT > 0
	BEGIN
		-- Rollback the transaction
		COMMIT TRANSACTION;
	END
	ELSE
	BEGIN
		-- Report the error
		PRINT ERROR_MESSAGE();
	END
END CATCH
